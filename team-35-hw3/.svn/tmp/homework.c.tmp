/*
 * file:        homework.c
 * description: skeleton code for CS 5600 Homework 3
 *
 * Peter Desnoyers, Northeastern Computer Science, 2011
 * $Id: homework.c 410 2011-11-07 18:42:45Z pjd $
 */

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "blkdev.h"

/********** MIRRORING ***************/

/* example state for mirror device. See mirror_create for how to
 * initialize a struct blkdev with this.
 */
struct mirror_dev
{
    struct blkdev *disks[2];    /* flag bad disk by setting to NULL */
    int nblks;
};

static int mirror_num_blocks(struct blkdev *dev)
{
    /* your code here */
<<<<<<< .mine
    struct mirror_dev *m_dev = dev -> private;
    return m_dev -> nblks;
=======
    struct mirror_dev *mdev = malloc(sizeof(*mdev));
    mdev = dev->private;
    int blk_num = mdev->nblks;
    if( mdev == NULL) {
    	printf("----ERROR---- FUNCTION: mirror_num_blocks");
    }
    return blk_num;
>>>>>>> .r1154
}

/* read from one of the sides of the mirror. (if one side has failed,
 * it had better be the other one...) If both sides have failed,
 * return an error.
 * Note that a read operation may return an error to indicate that the
 * underlying device has failed, in which case you should close the
 * device and flag it (e.g. as a null pointer) so you won't try to use
 * it again.
 */
static int mirror_read(struct blkdev *dev, int first_blk,
                       int num_blks, void *buf)
{
    /* your code here */
<<<<<<< .mine
    struct mirror_dev *m_dev = dev -> private;

    // Check if the requested address is valid.
    if ( first_blk < 0 || first_blk + num_blks > m_dev -> nblks )
    {
        return E_BADADDR;
    }

    int i;
    for ( i = 0 ; i < 2 ; i ++ )
    {
        struct blkdev *disk = m_dev -> disks[ i ];
        if ( disk == NULL )
        {
            continue;
        }
        else
        {
            // Try to read fron disk.
            int result = disk -> ops -> read ( disk, first_blk, 
                    num_blks, buf );

            if ( result == SUCCESS )
            {
                return SUCCESS;
            }
            else if ( result == E_UNAVAIL )
            {
                // Close and set the disk to NULL.
                disk -> ops -> close ( disk );
                m_dev -> disks[ i ] = NULL;
                continue;
            }
        }
    }
    // Non of the disks is working. return E_UNAVAIL.
    return E_UNAVAIL;
=======
    // state mirror device
    struct mirror_dev *mdev = malloc(sizeof(*mdev));
    // state block devices
    struct blkdev *d_left = malloc(sizeof(*d_left));
    struct blkdev *d_right = malloc(sizeof(*d_right));
    
    // flag for indicating operation status
    int flag;

    // illegal request range
    if (first_blk < 0) return E_BADADDR;
    // assign devices
    mdev = dev->private;
    d_left = mdev->disks[0];
    d_right = mdev->disks[1];	
    // read from the first disk 
    if (d_left->private != NULL) {
	flag = d_left->ops->read(d_left, first_blk, num_blks, buf);//get disk status code
	if ( flag == SUCCESS )
	{
	printf("----SUCCESS reading 1st disk----");
	return SUCCESS;
	}
	if ( flag == E_UNAVAIL )
	{
	d_left->ops->close(d_left); // close device
	d_left->private = NULL; // mark as unavailable
        printf("----FAILED reading 1st disk----");
	} 
    }
 
    // if the first disk failed, read from the other one
    if (d_rigit->private != NULL) {
	flag = d_right->ops->read(d_right, first_blk, num_blks, buf);//get disk status code
	if ( flag == SUCCESS )
	{
	printf("----SUCCESS reading 2nd disk----");
	return SUCCESS;
	}
	if ( flag == E_UNAVAIL )
	{
	d_right->ops->close(d_right); //close device
	d_right->private = NULL;  // mark as unavailable
        printf("----FAILED reading 2nd disk----");
	} 
    }
    // both sides above failed, return fail 
    printf("----FAILED reading both disks----");
    return E_UNAVAIL;
>>>>>>> .r1154
}

/* write to both sides of the mirror, or the remaining side if one has
 * failed. If both sides have failed, return an error.
 * Note that a write operation may indicate that the underlying device
 * has failed, in which case you should close the device and flag it
 * (e.g. as a null pointer) so you won't try to use it again.
 */
static int mirror_write(struct blkdev *dev, int first_blk,
                        int num_blks, void *buf)
{
    /* your code here */
<<<<<<< .mine
    struct mirror_dev *m_dev = dev -> private;

    // Check if the requested address is valid.
    if ( first_blk < 0 || first_blk + num_blks > m_dev -> nblks )
    {
        return E_BADADDR;
    }

    int i, result[ 2 ];
    for ( i = 0 ; i < 2 ; i ++ )
    {
        struct blkdev *disk = m_dev -> disks[ i ];
        if ( disk == NULL )
        {
            result[ i ] = E_UNAVAIL;
            continue;
        }
        else
        {
            // Try to read fron disk.
            result[ i ] = disk -> ops -> write ( disk, first_blk,
                    num_blks, buf );

            if ( result[ i ] == E_UNAVAIL )
            {
                // Close and set the disk to NULL.
                disk -> ops -> close ( disk );
                m_dev -> disks[ i ] = NULL;
            }
        }
    }
    if ( result[ 0 ] == SUCCESS || result[ 1 ] == SUCCESS ){
        return SUCCESS;
    } else {
        return E_UNAVAIL;
    }
=======
    struct mirror_dev *mdev = malloc(sizeof(mdev));
    struct blkdev *d_left = malloc(sizeof(*d_left));
    struct blkdev *d_right = malloc(sizeof(*d_right));
    
    // flag for indicating operation status
    int flag;

    // illegal request range
    if (first_blk < 0) return E_BADADDR;
    // assign devices
    mdev = dev->private;
    d_left = mdev->disks[0];
    d_right = mdev->disks[1];	
    // write from the first disk 
    if (d_left->private != NULL) {
	flag = d_left->ops->write(d_left, first_blk, num_blks, buf);//get disk status code
	if ( flag == SUCCESS )
	{
	printf("----SUCCESS writing 1st disk----");
	return SUCCESS;
	}
	if ( flag == E_UNAVAIL )
	{
	d_left->ops->close(d_left); // close device
	d_left->private = NULL; // mark as unavailable
        printf("----FAILED writing 1st disk----");
	} 
    }
 
    // if the first disk failed, wrtie the other one
    if (d_rigit->private != NULL) {
	flag = d_right->ops->write(d_right, first_blk, num_blks, buf);//get disk status code
	if ( flag == SUCCESS )
	{
	printf("----SUCCESS writing 2nd disk----");
	return SUCCESS;
	}
	if ( flag == E_UNAVAIL )
	{
	d_right->ops->close(d_right); //close device
	d_right->private = NULL;  // mark as unavailable
        printf("----FAILED writing 2nd disk----");
	} 
    }
    // both sides above failed, return fail 
    printf("----FAILED writing both disks----");
    return E_UNAVAIL;

>>>>>>> .r1154
}

/* clean up, including: close any open (i.e. non-failed) devices, and
 * free any data structures you allocated in mirror_create.
 */
static void mirror_close(struct blkdev *dev)
{
    /* your code here */
<<<<<<< .mine
    struct mirror_dev *m_dev = dev -> private;

    int i;
    for ( i = 0 ; i < 2 ; i ++ ){
        struct blkdev *disk = m_dev -> disks[ i ];
        if ( disk != NULL ){
            disk -> ops -> close ( disk );
        }
    } 
    free( m_dev );
    free( dev );
=======
    struct mirror_dev *mdev = malloc(sizeof(*mdev));
    mdev = dev->private;
    if( mdev == NULL) {
    	printf("----ERROR---- FUNCTION: mirror_close");
    } else {
	// close blk devices 
    	mdev->disks[0]->ops->close(mdev->disks[0]);
    	mdev->disks[1]->ops->close(mdev->disks[1]);
    }
>>>>>>> .r1154
}

struct blkdev_ops mirror_ops =
{
    .num_blocks = mirror_num_blocks,
    .read = mirror_read,
    .write = mirror_write,
    .close = mirror_close
};

/* create a mirrored volume from two disks. Do not write to the disks
 * in this function - you should assume that they contain identical
 * contents.
 */
struct blkdev *mirror_create(struct blkdev *disks[2])
{
    struct blkdev *dev = malloc(sizeof(*dev));
    struct mirror_dev *mdev = malloc(sizeof(*mdev));

    /* your code here */
<<<<<<< .mine
    if ( disks[0] -> ops -> num_blocks( disks[0] ) != disks[1] ->
            ops -> num_blocks( disks[1] ) )
    {
        printf("The disks size is not equal.\n");
        return NULL;
    }
    mdev -> disks[0] = disks[0];
    mdev -> disks[1] = disks[1];
    mdev -> nblks = disks[0] -> ops -> num_blocks( disks[0] );

=======
    mdev->disks[0] = disks[0];
    mdev->disks[1] = disks[1];
 
>>>>>>> .r1154
    dev->private = mdev;
    dev->ops = &mirror_ops;

    return dev;
}

/* replace failed device 'i' (0 or 1) in a mirror. Note that we assume
 * the upper layer knows which device failed. You will need to
 * replicate content from the other underlying device before returning
 * from this call.
 */
int mirror_replace(struct blkdev *volume, int i, struct blkdev *newdisk)
{
<<<<<<< .mine
    struct mirror_dev *m_dev = volume -> private;

    // If the size doesn't match, return E_SIZE error.
    if ( m_dev -> nblks != newdisk -> ops -> num_blocks( newdisk ) ){
        return E_SIZE;
    }

    int working_disk = ~i + 2;
    struct blkdev *disk = m_dev -> disks[ working_disk ];

    // Replicate the working disk.
    char buffer[ BLOCK_SIZE ];
    int lba;
    for ( lba = 0 ; lba < m_dev -> nblks ; lba ++ ){
        int result = disk -> ops -> read( disk, lba, 1, buffer );
        if ( result != SUCCESS ){
            return result;
        }
        result = newdisk -> ops -> write ( newdisk, lba, 1, buffer );
        if ( result != SUCCESS ){
            return result;
        }
    }

    // Replace the failed disk with newdisk.
    m_dev -> disks[ i ] = newdisk;
=======
    struct mirror_dev *mdev = malloc(sizeof(*mdev));
    mdev = volume->private;
    int blk_num = mdev->nblks;
    char buff[ 512 * blk_num];    
    // read content from the other device into buffer
    mdev->disks[1-i]->ops->read(mdev->disks[1-i], 0, blk_num, buff);
    // replicate content into newdisk
    newdisk->ops->write(newdisk, 0, blk_num, buff);
    // replicate disk[i] by newdisk
    mdev->disks[i]->private = newdisk->private;
>>>>>>> .r1154
    return SUCCESS;
}

/**********  STRIPING ***************/

int stripe_num_blocks(struct blkdev *dev)
{
    return 0;
}

/* read blocks from a striped volume.
 * Note that a read operation may return an error to indicate that the
 * underlying device has failed, in which case you should (a) close the
 * device and (b) return an error on this and all subsequent read or
 * write operations.
 */
static int stripe_read(struct blkdev *dev, int first_blk,
                       int num_blks, void *buf)
{
    return 0;
}

/* write blocks to a striped volume.
 * Again if an underlying device fails you should close it and return
 * an error for this and all subsequent read or write operations.
 */
static int stripe_write(struct blkdev *dev, int first_blk,
                        int num_blks, void *buf)
{
    return 0;
}

/* clean up, including: close all devices and free any data structures
 * you allocated in stripe_create.
 */
static void stripe_close(struct blkdev *dev)
{
}

/* create a striped volume across N disks, with a stripe size of
 * 'unit'. (i.e. if 'unit' is 4, then blocks 0..3 will be on disks[0],
 * 4..7 on disks[1], etc.)
 * Check the size of the disks to compute the final volume size, and
 * fail (return NULL) if they aren't all the same.
 * Do not write to the disks in this function.
 */
struct blkdev *striped_create(int N, struct blkdev *disks[], int unit)
{
    return NULL;
}

/**********   RAID 4  ***************/

/* helper function - compute parity function across two blocks of
 * 'len' bytes and put it in a third block. Note that 'dst' can be the
 * same as either 'src1' or 'src2', so to compute parity across N
 * blocks you can do:
 *
 *     void **block[i] - array of pointers to blocks
 *     dst = <zeros[len]>
 *     for (i = 0; i < N; i++)
 *        parity(block[i], dst, dst);
 *
 * Yes, it's slow.
 */
void parity(int len, void *src1, void *src2, void *dst)
{
    unsigned char *s1 = src1, *s2 = src2, *d = dst;
    int i;
    for (i = 0; i < len; i++)
        d[i] = s1[i] ^ s2[i];
}

/* read blocks from a RAID 4 volume.
 * If the volume is in a degraded state you may need to reconstruct
 * data from the other stripes of the stripe set plus parity.
 * If a drive fails during a read and all other drives are
 * operational, close that drive and continue in degraded state.
 * If a drive fails and the volume is already in a degraded state,
 * close the drive and return an error.
 */
static int raid4_read(struct blkdev *dev, int first_blk,
                      int num_blks, void *buf)
{
    return 0;
}

/* write blocks to a RAID 4 volume.
 * Note that you must handle short writes - i.e. less than a full
 * stripe set. You may either use the optimized algorithm (for N>3
 * read old data, parity, write new data, new parity) or you can read
 * the entire stripe set, modify it, and re-write it. Your code will
 * be graded on correctness, not speed.
 * If an underlying device fails you should close it and complete the
 * write in the degraded state. If a drive fails in the degraded
 * state, close it and return an error.
 * In the degraded state perform all writes to non-failed drives, and
 * forget about the failed one. (parity will handle it)
 */
static int raid4_write(struct blkdev *dev, int first_blk,
                       int num_blks, void *buf)
{
    return 0;
}

/* clean up, including: close all devices and free any data structures
 * you allocated in raid4_create.
 */
static void raid4_close(struct blkdev *dev)
{
}

/* Initialize a RAID 4 volume with stripe size 'unit', using
 * disks[N-1] as the parity drive. Do not write to the disks - assume
 * that they are properly initialized with correct parity. (warning -
 * some of the grading scripts may fail if you modify data on the
 * drives in this function)
 */
struct blkdev *raid4_create(int N, struct blkdev *disks[], int unit)
{
    return NULL;
}

/* replace failed device 'i' in a RAID 4. Note that we assume
 * the upper layer knows which device failed. You will need to
 * reconstruct content from data and parity before returning
 * from this call.
 */
int raid4_replace(struct blkdev *volume, int i, struct blkdev *newdisk)
{
    return SUCCESS;
}

